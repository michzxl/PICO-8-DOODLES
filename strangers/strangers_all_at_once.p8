pico-8 cartridge // http://www.pico-8.com
version 29
__lua__

function _init()
	t = 0

	pal({
		2+128,
		2,
		8+128,
		8,
		15+128,
		14+128,
		15,
		7,
	},1)

	_square_points = {
		vec(1,-1),
		vec(0,-1),
		vec(-1,-1),
		vec(-1,0),
		vec(-1,1),
		vec(0,1),
		vec(1,1),
		vec(1,0),
	}

	cls()
end

function _update()
	t += 1/30
	printh("---")
	
	local x,y = 64,64
	local r = 32
	local n = 8

	for i=1,800 do
		local x,y = rnd(128),rnd(128)
		local p = (boxblur(x,y,1))
		circ(x,y,1,p)
	end

	local k = rnd(0.005)
	vs = {}
	for i=1,n do
		local ang = i/n
		local ang_ofs = t/8
		local ofs_s = -t/8 + 0.1*sin(t/16)
		local ofs_c = sin(t/8 + ang/16 + i%2/8 + k) - k - t/8 + 1*cos(i%2/8)

		local sv = square(i,ang_ofs + ofs_s)
		local cv = circle(i,ang + ang_ofs + ofs_c)

		local fv = lerp(sv, cv, sin(t/8)/2+0.5)

		add(vs, fv * r)
	end

	polyv(vs, vec(x+cos(t*0.8),y+sin(t*0.8)), 8)
	--polyf(vs, vec(x,y), 0)
	
end

function square(i, ang)
	local s = _square_points[i]
	local a,r = s:polar()
	printh(a.." "..r)
	printh(s)
	printh(vec.frompolar(a + ang,r))
	printh("")
	return vec.frompolar(a + ang,r)
end

function circle(i, ang)
	return vec.frompolar(ang,1)
end

function boxblur(x,y,width)
	sum=0
	count=(width*2+1)*(width*2+1)

	for xa=x-width,x+width,1 do
		for ya=y-width,y+width,1 do
			sum=sum+pget(xa,ya)
		end
	end

	return sum/count
end

function nsin(a)
	return (sin(a)+1)/2
end

function lerp(a,b,t)
	if t==1 then return b end
	return a + (b - a)*t
end

function line2(x1,y1,x2,y2,c)
 local num_steps=max(
  abs(flr(x2)-flr(x1)),
  abs(flr(y2)-flr(y1)))
 local dx=(x2-x1)/num_steps
 local dy=(y2-y1)/num_steps
 for i=0,num_steps do
  pset(x1,y1,c)
  x1+=dx
  y1+=dy
 end
end

function sqr(a) return a*a end

_const_a = 1007/1024
_const_b = 441/1024
_const_c = 5/128

vec = {
	new = function(x,y,z)
		return setmetatable({
			x=x,
			y=y,
			z=z
		},_vec)
	end,

	frompolar = function(ang,r)
		return vec(r*cos(ang), r*sin(ang))
	end,
	unit=function(rot)
		return 
			vec(1,0,0),
			vec(0,1,0),
			vec(0,0,1)
	end,
	ones=function()
		return vec(1,1,1)
	end,

	ZERO = 0.001,

	copy = function(self)
		return vec(self.x,self.y,self.z)
	end,

	polar = function(self)
		return self:ang(), #self
	end,
	ang = function(self)
		return atan2(self.x,self.y)
	end,
	r = function(self)
		return #self
	end,
	turn = function(self, ang)
		local v = self:copy()
		v:setang(self:ang() + ang)
		return v
	end,

	setc=function(self, x, y, z)
		self.x=x or 0
		self.y=y or 0
		self.z=z or 0
		return self
	end,
	set=function(self,v)
		self.x=v.x or 0
		self.y=v.y or 0
		self.z=v.z or 0
	end,
	setang = function(self,ang)
		return self:setpolar(ang, #self)
	end,
	setr = function(self, r)
		self:setpolar(self:ang(), r)
	end,
	setpolar = function(self, ang, r)
		return self:setc(r*cos(ang), r*sin(ang))
	end,

	magn = function(self)
		return #self
	end,
	sqrmagn = function(v)
		return v.x*v.x + v.y*v.y + v.z*v.z
	end,

	-- https://www.flipcode.com/archives/Fast_Approximate_Distance_Functions.shtml
	-- is only 2D
	approx_magn = function(v)
		local mmin = min(v.x,v.y)
		local mmax = max(v.x,v.y)
		return _const_a*mmax + _const_b*mmin
			- (mmax < 16*mmin and _const_c*mmax or 0)
	end, 

	norm=function(self, len)
		len = len or 1
		if self:nearzero(vec.ZERO) then
			return vec()
		else 
			return self/#self * len
		end
	end,
	perp = function(self, len)
		return vec(-self.y, self.x):norm(len)
	end,
	cross = function(A, B)
		return vec(
			A.y*B.z - A.z*B.y,
			A.z*B.x - A.x*B.z,
			A.x*B.y - A.y*B.x
		)
	end,
	dot = function(v,w)
		return v.x*w.x + v.y*w.y + v.z*w.z
	end,
	cmult = function(a,b)
		return vec(
			a.x*b.x,
			a.y*b.y,
			a.z*b.z
		)
	end,
	nonzero = function(self,unit)
		return not (self.x==0 and self.y==0 and self.z==0)
	end,
	nearzero = function(self,dist)
		return #self<dist
	end,

	constrain = function(self,anchor,dist)
		return (self - anchor):norm(dist) + anchor
	end,
	constrain_min = function(self,anchor,dist)
		local v = self - anchor
		return #v<dist and self:constrain(anchor,dist) or self
	end,
	constrain_max = function(self,anchor,dist)
		local v = self - anchor
		return #v>dist and self:constrain(anchor,dist) or self
	end,

	-- TODO: implement better version of this thing:
	xy = function(self)
		return self.x,self.y
	end,
	xyz=function(self)
		return self.x,self.y,self.z
	end,
	cx=function(self)
		return vec(self and self.x or 1,0,0)
	end,
	cy=function(self)
		return vec(0,self and self.y or 1,0)
	end,
	cz=function(self)
		return vec(0,0,self and self.z or 1)
	end,
	distr = function(self,f)
		return vec(
			f(self.x),
			f(self.y),
			f(self.z)
		)
	end,
	zip = function(self,v,f)
		return vec(
			f(self.x,v.x),
			f(self.y,v.y),
			f(self.y,v.y)
		)
	end,
	fflr = function(self, unit)
		return self:distr(function(a) 
			return fflr(a, unit or 1)
		end)
	end,
	fflrz = function(self, unit)
		local signs = self:distr(sgn)
		local fv = self:distr(abs):fflr(unit)
		return fv:cmult(signs)
	end,
	rot_x = function(v, ang)
		return vec(
			v.x, 
			v.y * cos(ang) - v.z * sin(ang), 
			v.y * sin(ang) + v.z * cos(ang)
		)
	end,
	
	rot_y = function(v, ang)
		return vec(
			v.z * sin(ang) + v.x * cos(ang), 
			v.y, 
			v.z * cos(ang) - v.x * sin(ang)
		)
	end,
	
	rot_z = function(v, ang)
		return vec(
			v.x * cos(ang) - v.y * sin(ang), 
			v.x * sin(ang) + v.y * cos(ang), 
			v.z
		)
	end,

	rot_yxz = function(v, a)
		local nv = v:copy()
		nv = vec.rot_y(nv, a.y)
		nv = vec.rot_x(nv, a.x)
		nv = vec.rot_z(nv, a.z)
		return nv
	end,

	u_rot_yxz = function(angs)
		local cx,sx,cy,sy,cz,sz = angs:cache_trig()
		local x,y,z = angs:xyz()
		local ux = vec(
			cy*cz - sy*sx*sz,
			cy*sz + sy*sx*cz,
			-sy*cx
		)
		local uy = vec(
			-cx*sz,
			cx*cz,
			sx
		)
		local uz = vec(
			sy*cz + cy*sx*sz,
			sy*sz - cy*sx*cz,
			cy*cx
		)
		return ux,uy,uz
	end,

	rrot = function(v, config, a)
		local nv = v:copy()
		for i=1,#config do
			local func = self["rot_"..sub(config, i,i)]
			nv = func(nv, a[i])
		end
		return nv
	end,

	cache_trig = function(angs)
		return 
			cos(angs.x),sin(angs.x),
			cos(angs.y),sin(angs.y),
			cos(angs.z),sin(angs.z)
	end,
}

_vec={
	__index=vec,
	__add=function(p1,p2)
		return vec(p1.x+p2.x,p1.y+p2.y,p1.z+p2.z)
	end,
	__sub=function(p1,p2)
		return vec(p1.x-p2.x,p1.y-p2.y,p1.z-p2.z)
	end,
	__mul=function(p,a)
		return vec(p.x*a,p.y*a,p.z*a)
	end,
	__div=function(p,a)
		return vec(p.x/a,p.y/a,p.z/a)
	end,
	__unm=function(p)
		return vec(-p.x,-p.y,-p.z)
	end,
	__len=function(p)
		return sqrt(sqr(p.x)+sqr(p.y)+sqr(p.z))
	end,
	__tostring=function(self)
		return "<"..flr(10*self.x)/10 ..","..flr(10*self.y)/10 ..","..flr(10*self.z)/10 ..">"
	end,
}

setmetatable(vec, {
	__call = function(self,x,y,z)
		return setmetatable({
			x=x or 0,
			y=y or 0,
			z=z or 0,
		}, _vec)
end})

function polydraw(vecs,cen,col)
	cen = cen or vec()
	for i=1,#vecs do
		local p1 = vecs[i] + cen
		local p2 = vecs[i%#vecs+1] + cen
		line2(p1.x,p1.y,p2.x,p2.y,col)
	end
end

function polyfill(points,cen,col)
	local xl,xr,ymin,ymax={},{},129,0xffff
	for k,v in ipairs(points) do
		local p1, p2 = v + cen, points[k%#points+1] + cen
		local x1,y1,x2,y2,x_array=p1.x,flr(p1.y),p2.x,flr(p2.y),xr
		if y1 == y2 then
			xl[y1],xr[y1]=min(xl[y1] or 32767,min(x1,x2)),max(xr[y1] or 0x8001,max(x1,x2))
		else
			if (y1>y2) then x_array,y1,y2,x1,x2=xl,y2,y1,x2,x1 end
			for y=y1,y2 do
				x_array[y]=flr(x1+(x2-x1)*(y-y1)/(y2-y1))
			end
		end
		ymin,ymax=min(y1,ymin),max(y2,ymax)
	end
	for y=ymin,ymax do
		rectfill(xl[y],y,xr[y],y,col)
	end
end

function polypath(vecs,cen,col)
	cen = cen or vec()
	for i=1,#vecs-1 do
		local p1 = vecs[i] + cen
		local p2 = vecs[i+1] + cen
		line2(p1.x,p1.y,p2.x,p2.y,col)
	end
end

function polycen(poly)
	local v = vec()
	for point in all(poly) do
		v = v + point
	end
	return v / #poly
end

function poly_normal(poly)
	local v1 = (poly[2] - poly[1]):norm()
	local v2 = (poly[3] - poly[2]):norm()
	return vec.cross(v1,v2)
end

	--[[
				 4____________________1 (s2,s2,s2)
			   / |                  /|
			 /                    /  |
		  /     |              /    |
		3____________________2      |
		|       |            |      |
		|                    |      |
		|       6_ _ _ _ _ _ | _ _ _5
		|     /              |     /
		|   /                |   /
		| (-s2,-s2,-s2)      | /
		7/___________________8

	--]]
function poly_cube(s)
	local s2 = s/2
	local v = {
		vec(s2,s2,s2),
		vec(s2,-s2,s2),
		vec(-s2,-s2,s2),
		vec(-s2,s2,s2),
		vec(s2,s2,-s2),
		vec(-s2,s2,-s2),
		vec(-s2,-s2,-s2),
		vec(s2,-s2,-s2),
	}
	local f = {
		{ 1,2,3,4 },
		{ 5,6,7,8 },
		{ 1,4,6,5 },
		{ 1,5,8,2 },
		{ 2,8,7,3 },
		{ 3,7,6,4 },
	}
	return f, v
end

function init_shapes() 
	local cube_f, cube_v = poly_cube(1)
	local cube = {
		f = cube_f,
		v = cube_v,
	}

	SHAPE = {
		cube = cube,
	}
	return SHAPE
end

polyv = polydraw
polyp = polypath
polyf = polyfill
__label__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000002020000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000087202000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000008787772oo000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000077f7777oi00020000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000077ffuf7777i22o2000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000i877fufuu7u77772o000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000i878fuvuuuvvu7u777v8v020000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000v7vuvuvv8vvvuuuvv777202ii2i00000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000087f7uvv8v8vuuuvvvuuu77iv2i2i0000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000008787v8v888vuuuuvvvuuuvu7772i00000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000i077uuv88v8vu2uvuvuuuuuufu777700200i0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000i077uuv7uv8vuuuuuvuuvuuvvufuff7770vi02000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000o7uvvvvvuvvuuvuuuuvuvvvvvufuuuu777720200000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000o07vuvvvuvvvvvvvuuvuvuuvvuuuuuuuuuv77200i000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000077uvvvuvvvvvvvvvuuvvuuufuuffuuuufuff777ui0i22i000000000000000000000000000000000000000000
000000000000000000000000000000000000000077vuvuvvvvvvvvvvvuvuvuvuuuffuuuuufuu77777722i2i00000000000000000000000000000000000000000
00000000000000000000000000000000000000077uuvuvuvvvvvvvvvvuv8uvuvuuuffuuu7uufuu7u77772i0i0000000000000000000000000000000000000000
0000000000000000000000000000000000000007u7uuvvvvvv8vvu8vuv8888vuuuufuuuuuuuuffuuuuu7777i000ii00000000000000000000000000000000000
0000000000000000000000000000000000000007uufuvvvvv8v8u8888u8o888vvuuuuuuuuuufuuuuuuff7777u0iiii0000000000000000000000000000000000
0000000000000000000000000000000000000877uuufuvvvv88v88oo8fo8o8vvvvuuuuuuuuuuuuuuuffffvvu7777i08i20000000000000000000000000000000
0000000000000000000000000000000000008u7uuufuvvvv8888oooooooo8v8vvuuuuuuuvuvfuuuuufff7uvuu7777782i2200000000000000000000000000000
00000000000000000000000000000000000007uuuuuvvvvvv88o2ooooooov8vuvuvuufuvvvvvuvvuuffuufuu7ufu77772v820000000000000000000000000000
000000000000000000000000000000000000i7uuuuvvvvvvu882o222ioo8ov8vuvuvvvvvvvvvvvvvufuuuuuuuuufuuo777v88000000000000000000000000000
00000000000000000000000000000000000i7uuuuvuvvvvf888o222iii2ou888vuvvvvvvvvvvvvvuvufuuuuuuuuuuuvvv77777080i0000000000000000000000
0000000000000000000000000000000000007uuuuuvvvvvvu8o8o22iiiii28888vvuvvvvvvvvvvuvvuufu7uu7uuuuuuvvvu7778f80i000000000000000000000
00000000000000000000000000000000002v7uuuuuvvvvvvv88o82iiii022o88vvv88vvvvvv8vvvvuvfufuuuu7uuvuvuvuuufu777i0000000000000000000000
000000000000000000000000000000000207v7fuuuvvuvvvuv88282ii00022o2uv888o8vvo8v8vvuvuv7uuuvvvuvuvuvuuuu7uff700000000000000000000000
000000000000000000000000000000000027ff7uuvvvvuvuv8v8828i0000002iv8v8ooo8ovo888vvuvvuuuvvvvv8vuvuvuu7uuuf7i0000000000000000000000
000000000000000000000000000000000077uffuvuvvvvvvvv8v882i200000ioivovooo88o2o8v8vvvvvvvv88v8v8vuvvvuvuuu770i000000000000000000000
00000000000000000000000000000000i87uuuufuvvvvvvv8v8888i2i000000ii2vooo8oo2oo88v7vvv8vv8888v8vuvvvvvvvuf78i0000000000000000000000
000000000000000000000000000000008i7uuuuu7uvvvvv8v8v8882i0i00000i2io22i2ooo22o2o8oo8888888v88vvvvvvfvuu77i00000000000000000000000
0000000000000000000000000000000027fuuuuuu7vvvuvv8v8v8282i0000000ii22i2ioio222o2oooo88888v8888v8vvvu7uu7ioi0000000000000000000000
00000000000000000000000000000002u7uuuuuuuvvvvvvvvvvvvo2i2i000000iii00i0iiiio2222oooo88v8888888v8vvvuvf7oi00000000000000000000000
000000000000000000000000000000007ufuuuuuvvvvvvvvuvvuo8o2i00000000i000000ii0i2222o2oo8o888888vv88v8vvu77i000000000000000000000000
0000000000000000000000000000000077uuuouvvvvvvvvvvvuvvoo2000000000000000000i0222o2oooo888888u88888v8u878i000000000000000000000000
000000000000000000000000000000007uuuuuvvvvuvvvuvvuvvvvoo00000000000000000i022222o2ooo88o8o88888888vv77i0i00000000000000000000000
0000000000000000000000000000000777uvvvvvvvvvvvvvuv88vooo0000000000000000i0i2222o2ooo8o88oo888o8888uv7vii000000000000000000000000
000000000000000000000000000000o777uuvvvvvuvvvvvvv888ooooi0000000000000000i2o22ooooo8oo88ooo8o8888uuu7000000000000000000000000000
00000000000000000000000000000o7ouuuuvvvvvv88v88v88888ooii000000000000000i2o2ooooo8ooo8o8ooo8oo888uu77000000000000000000000000000
00000000000000000000000000000o7u77uuvvvvv88888888888ooi0i00000000000000i2i8oo8oooooo8o8oooooo8o8vvu7vi00000000000000000000000000
0000000000000000000000000000o7uff77vuvvv8888888v88882i0i00000000000000i2i2o8oo8ooooo88o8ooooo88vvv77i0i0000000000000000000000000
0000000000000000000000000000o77uf7uvvuv888888888v8o280i000000000000000oi2o2o88o8ooooooooo8oo888vvu77ii00000000000000000000000000
0000000000000000000000000002o7uf7uvuvv8v8888888o828o2i000000000000000iioo2oooooo8oooooooo8o8888vuf7i2i00000000000000000000000000
000000000000000000000000000o7f7vf7uv8vv888888oo8222io000000000000000iiivoooooooooooooooo888o88uff7fvi000000000000000000000000000
000000000000000000000000000077fv7uv888888888o22o222i0000000000000000i2ioooo88oooooooooo88888vuvuf7v20000000000000000000000000000
00000000000000000000000000077fv7uvu888v88v882222o2i0i00000000000000i2iiooooo88oooooo8o8o88888vuu77v00000000000000000000000000000
000000000000000000000000000777uuvuvv8v8v8uv822222oii0i00000000000000ii2iooooo8oooo8888o888888fuu7v2o0000000000000000000000000000
00000000000000000000000000878uuuuvvvvvv8v8v88o22222i2000000ii2i00000iii2o8oo8o8o8888888888v8uvuu78820000000000000000000000000000
0000000000000000000000000077fvuuvuvvvvvv8888ooo222222200000ii22ii000iiiooo8oo888888888888v888uu7v8800000000000000000000000000000
000000000000000000000000007f7ufuuvvvvvvv88888o222o22222i00iiio2ii0000i22ooo88v88v8888888v8888uu7vvi00000000000000000000000000000
0000000000000000000000000777ffuvvvvvvvvv888882222oo22282202io2oi2i0022222888vvuu888888888vuvvu77vi2i0000000000000000000000000000
0000000000000000000000000777fvvvvvvvvvvv888888228o8o2o2282oo2o22i2222222o888vvvv88888888vuvvvv77v2i00000000000000000000000000000
00000000000000000000000077uuvvvvuvuvvvvvv8v88vv8uv88oooo2oooo2oo222o2ooo8o888vvv888888888vuvuf772o000000000000000000000000000000
00000000000000000000000v7vuvuvvvvuvvvvvvvvvv8vv8v8oo8ooooooooooo8oooooooooo88vuv888888888uvvu772o2000000000000000000000000000000
00000000000000000000000o7ufuvvvvvvvvvvvvvvv8v88v8o8oooooo8o8oooovooooooooooou88v88888888uvvuv78o20000000000000000000000000000000
0000000000000000000000i77fuvuvvvvuvvvvvvvv8v88888oo8ooooooooooo88oooo8oooooo8888v888888uuvvv77oioi000000000000000000000000000000
000000000000000000000i2777fuvvuvuvvvvvvvv8v88v88o8o8oooooooo88888ooooo888oo8o88v88888888vuvu778oi0000000000000000000000000000000
0000000000000000000002777vuvvuvuvvvvvvvvvv8v88888o88ooooooooo8o8o8ooooo8o8oo88vvv8888888vvu77uuii0000000000000000000000000000000
000000000000000000000o77vvuu7vvvvvvvvvvvvvv8vuv888888o8o8ooooo8o8o8ooooo8o8uvvvvvv8v8888vvu7u8iii0000000000000000000000000000000
00000000000000000000o077vu7uvvvvvvvvvvvvv8vvuv88888888ooooooooo8o8o8ooooo888vvvvvuv8v8888ff7vv8i00000000000000000000000000000000
000000000000000000000777u7uvuvvvvvvvvvvv8887v88888888ooooooooo2o8o8oo8oo8888vvvvuuvv88888u7vuv0000000000000000000000000000000000
0000000000000000000002777uvuvuvvvvvvvvvv888v8888888888ooooooo2o2ooo88o8o888vvvvvvvvv8888uu7uo00000000000000000000000000000000000
0000000000000000000000o2777vuuvvvvvvvvu8v8v8v88v88888888oooooo2ooooo8vv8vuvvvvvvvuvv888vu7uo2o0000000000000000000000000000000000
00000000000000000000000o0io777uvvvvvvvvu8v8v88v88v888888ooooo2o2ooo8o8vvuvvvvvvvuvuv8vvuv77uo00000000000000000000000000000000000
000000000000000000000000002v2777vvvuvvuvu8vvvvvvv88888888ooo2o22oooo8vvvvvvvvvvvvvvuvuvvu7u8i00000000000000000000000000000000000
00000000000000000000000000i02o28777vuuuvvuvvvvvvv8888888888882222o8ouvvvvvvvvvvvvvvvfvuu77vu8i0000000000000000000000000000000000
000000000000000000000000000002008v777uvuu7uuvvvv8v88888888888o22ooo8vv88vvvvvvvvvvvfuuuv7vuvi00000000000000000000000000000000000
000000000000000000000000000000000202i777vuuuuv7vv8vuvv888888o8ooo88v88888vvvvvvvvvvufuu777vi200000000000000000000000000000000000
00000000000000000000000000000000000i0027777uvvuuvvvvv8v88v8v8o8ooo88v888vvvvvvvvvvvfuuu77f820i0000000000000000000000000000000000
000000000000000000000000000000000000020222777vuuuuvuvv8vv8v8v8ooooo88v8v8vvvvvvvvvvuuu77f780i00000000000000000000000000000000000
000000000000000000000000000000000000000022227777uuuvuuvvuvvv888ooooovvvvvvvvvvvvvvvvuf7f780i000000000000000000000000000000000000
00000000000000000000000000000000000000000000ovi77u7uuuuuvvuv88888oovvvvvvvvvvvvvvvvvuu777000000000000000000000000000000000000000
000000000000000000000000000000000000000000000iooi7777uufuuvu88888vvvvvvvuvvvvvvvvvvvu77780i0000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000oio7777ffuvv888vvvuvuuuvfvvvvvvvvvuf7f82i0i000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000oi0i77777u88888uuvuvfuuvvuvvvvvvvv7ff78000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000i0i0i8o777788v7ffuvfuuuuuvuvvvvvvu7f7vi000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000i0iiio777vvfffffufuuvuuuuvvvuv777u20i00000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000ii0ii2iv777ff7fuuuvuvuuuvvuvu77u202000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000iiiiv777f77uuuvuuuvvvvuu777720000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000ii000o77778u7uuuuuvvuu77uu800000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000o2o7777uvuvvuuuu77uuui0000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000o0007777v7v7uu777u88i0000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000077777777v88v800000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000007777778v88000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000002o777v820000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000002000000i000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

