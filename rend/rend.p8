pico-8 cartridge // http://www.pico-8.com
version 30
__lua__

#include vec.lua
#include tex.lua
#include _2_util.lua
#include dots.lua

function _init()
	cls()

	t = -1/30

	orot = 0

	tet = {
		v = {
			vec(1, 1, 1),
			vec(−1, −1, 1),
			vec(−1, 1, −1),
			vec(1, −1, −1),
		},
		f={
			{1,2,3, },
			{1,2,  4},
			{1,  3,4},
			{  2,3,4},
		},
	}
	local tot = 
		  vec(1, 1, 1)
		+ vec(−1, −1, 1)
		+ vec(−1, 1, −1)
		+ vec(1, −1, −1)
	avg = tot / 4

	pal({
		[0]=2+128,
		2+128,
		5+128,
		5+128,
		5,
		5,
		6+128,
		6+128,
		15,
		15,
		15+128,
		15+128,
		14+128,
		14+128,
		8,
		8,
	},1)

	lines = {
		"rend.    ",
		"tear it out.",
		"say something.",
		"i feel it,",
		"a way to begin.",
		"may i? break",
		"a last time,",
		"loathing",
		"vessel, empty",
		"promise.",
		"rend.",
		"                ",
	}
	currline = 0
	currtext = ""
	currtimer = 0
	currspd = 3
	overtime = 0.8
	isover = false
	over = 0
	wait = 0.6

	oscalex = 0.9
	oscaley = 1

	next_line()

	stones = {}

	of = function() end
end

---=========---

function _update()
	--cls()
	t += 1/30

	pal({
		[0]=2+128,
		2+128,
		5+128,
		5+128,
		5,
		5,
		6+128,
		6+128,
		15,
		15,
		15+128,
		15+128,
		14+128,
		14+128,
		8,
		8,
	},1)

	for i=1,250 do
		local x,y = rnd(128),rnd(128)
		circ(x,y,1,((x-y<0) and 0.15 or 0) + boxblur(x,y,2))
	end

	--clip(128-32,128-48,128-8,128-8)
	for i=1,50 do
		local x,y = rnd(24)+128-32,rnd(40)+128-48
		circ(x-1,y-1,1,pget(x,y)-1)
	end
	--clip()

	if not isover then
		local ti = currtimer
		for x=0,ti*4 do
			local x = x * 4
			local y = 64 - x
			local x2 = x+8+sin(t/4+x/16)
			local y2 = y+8+sin(t/4+x/16)
			line(x,y,x2,y2,8)
			line(140-x,140-y,140-x2,140-y2,8)
		end
	end

	if not isover and rnd(1)<0.1 then
		local ti = currtimer
		local x = 8
		local y = 128-10/2
		for i=1,20 do
			local x2 = x + rnd(8)
			local y2 = mid(118, 128, y + rnd(16)-8)
			line(x,y,x2,y2,2)
			x,y=x2,y2
		end
	end

	currtimer += 1/30
	if (currtimer-overtime-wait)*currspd>#currtext then
		next_line()
	end
	isover = currtimer*currspd>#currtext+wait
	over = max(0,currtimer*currspd - #currtext - wait)

	local scalex,scaley = oscalex,oscaley

	scalex,scaley = scalex + 0.1*mid(0,1,currtimer*currspd/#currtext-wait), scaley + 0.1*mid(0,1,currtimer*currspd/#currtext-wait)

	local ang = 0.1
	local rad = 8

	local w = 16
	local wp = w*8

	local split = 8 * (currtimer * currspd)

	---=========---

	rad *= scaley
	ang = ang

	local p1 = vec(8,64)
	local p2 = p1 + vec(wp*scalex-1,8*scaley-1)

	local mid1 = vec(p1.x + split*scalex,p1.y)
	local mid2 = vec(p1.x + split*scalex,p2.y)

	local rect1 = {
		(isover) 
			and vec(
				  p1.x   + 48 + rnd(4)-2 - over*8
				, p1.y   - 48 + rnd(4)-2 - over*8
			) 
			or vec(p1.x,p1.y),
		(isover)
			and vec(
				  mid2.x + 32 + rnd(4)-2
				, p1.y   - (over-wait>overtime/4 and 64/#currtext or 64) + rnd(4)-2
			) 
			or vec(mid2.x,p1.y),
		vec(mid2.x,mid2.y),
		vec(p1.x,mid2.y),
	}

	local rect2 = {
		vec(mid1.x,mid1.y),
		vec(p2.x,mid1.y),
		vec(p2.x,p2.y),
		vec(mid1.x,p2.y),
	}

	local pivot
	if ang<0 then
		pivot = rect1[2] - vec(0,rad)
	else
		pivot = rect1[3] + vec(0,rad)
	end
	local cen = vec(0,126)
	cen.x += (rect1[2] - rect1[1]).x

	-- why is this in 2 for loops?
	-- only god knows
	for p in all(rect1) do
		local np = p - pivot
		p:set(rotate(np,0) + cen)
	end
	for p in all(rect2) do
		local np = p - pivot
		p:set(rotate(np,-ang) + cen)
	end

	-- try it
	--fillp(0b1010010110100101.1)

	local dd = rnd(1)<0.9
	local arclen = ang*(2*3.1415)*(8*scaley+rad)
	arclen = ceil(arclen)
	local anga = abs(ang)
	for a=0,-anga,-ang/arclen/4 do
		a += 1/4.2*sgn(ang)
		local p1 = vec.frompolar(a,rad) + cen
		local p2 = vec.frompolar(a,rad + 8*scaley-1) + cen
		--line(p1.x,p1.y,p2.x,p2.y,1)
		--pset(p1.x,p1.y,1)
		--pset(p2.x,p2.y,1)
		if (dd) tline(p2.x,p2.y,p1.x,p1.y,split/8,0,0,0.125* (1/scaley))
	end

	fillp()

	local ll = over+wait
	if true then
		local num = isover and 2 or 1
		for i=1,num do
			local pos
			if rnd(1)<0.5 then
				pos = vec(
					rnd(1)<0.5 and -1 or 128,
					rnd(128)
				)
			else
				pos = vec(
					rnd(128),
					rnd(1)<0.5 and -1 or 128
				)
			end
			pos = vec(rnd(128),rnd(128))
			pos = pos + vec(rnd(8)-4,rnd(8)-4)

			if not isover then pos = vec(rnd(128),rnd(128)) end

			-- local vel = vec.frompolar(
			-- 	rnd(3/12) + 1/12, -- 1/12..4/12
			-- 	1+rnd(0.5)
			-- )
			local vel = vec.frompolar(
				-- (vec(64,64) - pos):ang() + rnd(0.25) - rnd(0.125),
				rnd(3/12),
				2 + rnd(1)
			)
			if not isover then vel:set(vel:norm(0.5)) end
			local dmp = 0.90 + rnd(0.025)
			local len = 4
			local ang = rnd(1)
			local angv = 0.05 + rnd(0.025)
			local angdir = rnd(1)<0.5

			add(stones, {pos=pos,vel=vel,dmp=dmp,len=len,lendef=len,ang=ang,angv=angv,angdir=angdir})
		end
	end

	for stn in all(stones) do
		stn.vel = stn.vel * stn.dmp
		stn.pos = stn.pos + stn.vel
		stn.len = lerp(stn.len,4,0.1)
		stn.angv = stn.angv * stn.dmp
		stn.ang = stn.ang + stn.angv

		if isover then
			stn.len = 8 + rnd(6)
		end

		local dir = stn.vel:rot((stn.angdir and 1 or -1) * (stn.ang + rnd(0.05))\(1/16)*(1/16) )

		local p1 = stn.pos - dir*stn.len/2
		local p2 = stn.pos + dir*stn.len/2

		line(p1.x,p1.y,p2.x,p2.y,15)

		p1 = stn.pos - dir:perp()*stn.len/2
		p2 = stn.pos + dir:perp()*stn.len/2

		line(p1.x,p1.y,p2.x,p2.y,15)

		if stn.vel:sqrmagn() < sqr(isover and 0.05 or 0.05) then
			del(stones,stn)
		end
	end

	local n = abs( 12+5*sin(t/4) )
	n = n
	local ns = {}
	local lo = 1
	local hi = n
	local uselo = true
	local cen = vec(24,24)

	circfill(cen.x,cen.y,16,1)
	circ(cen.x,cen.y,17,0)
	for r=1,17,rnd(0.5)+1 do
		circ(cen.x,cen.y,r,3)
	end

	while abs(lo-hi)>1 do
		if uselo then
			add(ns, lo)
			lo += 1
		else
			add(ns, hi)
			hi -= 1
		end
		uselo = not uselo
	end
	for i1=1,#ns  do
		local p1 = ns[i1]
		local i2 = i1%#ns+1
		local p2 = ns[i2]

		local a1,a2
		
		-- try changing to -t/8 !!!!
		if t%12<4 then
			a1 = p1 / n + t/8
			a2 = p2 / n + t/8
		elseif t%12<8 then
			a1 = p1 / n + t/8 + sin(i1/64)
			a2 = p2 / n + t/8 + sin(i2/64)
		else
			a1 = p1 / n - t/8 - p2/8			
			a2 = p2 / n + t/8
		end
		
		local v1 = vec.frompolar(a1, 16) + cen
		local v2 = vec.frompolar(a2, 16) + cen
		
		line(v1.x,v1.y,v2.x,v2.y,5 + (i1%2==0 and 2 or 0))
	end
	
	if (isover) then 
		local fill = rnd(36000)
		fill = fill | 0b1010010110100101.1
		fillp(fill)
		polyfill({
				vec(0,0),
				rect1[1],
				rect1[4],
				vec(0,127)
			},
			vec(0,0),
			1
		)
		fillp()
	end

	if isover then
		line(128-32,32,rect1[1].x,rect1[1].y,0)
	end

	pal(1,0,0)
	pal(7,15,0)

	-- outline
	-- local ofs = vec(cos(t/2),sin(t/2))
	-- quadv(rect1[1]+ofs,rect1[2]+ofs,rect1[3]+ofs,rect1[4]+ofs,7)
	-- quadv(rect2[1]+ofs,rect2[2]+ofs,rect2[3]+ofs,rect2[4]+ofs,7)

	tquad(
		rect1[1].x,rect1[1].y,
		rect1[2].x,rect1[2].y,
		rect1[3].x,rect1[3].y,
		rect1[4].x,rect1[4].y,
		0,0,
		split/8,1
	)

	pal(7,13,0)

	tquad(
		rect2[1].x,rect2[1].y,
		rect2[2].x,rect2[2].y,
		rect2[3].x,rect2[3].y,
		rect2[4].x,rect2[4].y,
		split/8,0,
		w - split/8,1
	)

	pal(1,1,0)
	pal(7,7,0)
	pal({
		[0]=2+128,
		2+128,
		5+128,
		5+128,
		5,
		5,
		6+128,
		6+128,
		15,
		15,
		15+128,
		15+128,
		14+128,
		14+128,
		8,
		8,
	},1)

	---===---

	if t%8<4 then of() end

	---===---

	orot += rnd(0.00) + (sin(t/8)+0.5>0 and sin(t/8)*0.025 or 0)
	local us = vec(-t/8+orot,t/12 + t/4\0.01*0.01,-t/8):u_rot_yxz()
	local scale = vec.one() * (32 + rnd(8)*sin(t/8))
	local trans = vec(128-32,32,0)

	local vs = {}
	for v in all(tet.v) do
		local v = v - avg
		local nv = us:dot(v:scale(scale)) + trans 
		if rnd(1)<0.02 then
			local s = 32
			nv += vec(rnd(s)-s/2,rnd(s)-s/2)
		end

		add(vs,nv)
	end

	fillp(0b1000000000000000.1)
	for f in all(tet.f) do
		local buf = {}
		for vi in all(f) do
			add(buf, vs[vi])
		end
		trifill(buf[1]*(1 + 0.02*sin(t/8)),buf[2]*(1 + 0.02*sin(t/8)),buf[3]*(1 + 0.02*sin(t/8)),13)
		--triv(buf[1],buf[2],buf[3],15)
	end
	fillp()

	of = function()
		fillp(0b1000000000000000.1)
		local vs = vs
		for f in all(tet.f) do
			local buf = {}
			for vi in all(f) do
				add(buf, vs[vi])
			end
			trifill(buf[1]*(1 + 0.02*sin(t/8)),buf[2]*(1 + 0.02*sin(t/8)),buf[3]*(1 + 0.02*sin(t/8)),15)
			--triv(buf[1],buf[2],buf[3],15)
		end
		fillp()
	end

	for f in all(tet.f) do

		local buf = {}
		for vi in all(f) do
			add(buf, vs[vi])
		end
		--trifill(buf[1],buf[2],buf[3],13)
		triv(buf[1],buf[2],buf[3],14)
	end
end

__gfx__
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111ff1111fffff111177771117777111177777711777777111777711177117711777777111111771177117711771111117711171177117711777777117777711
11ffff111ff11ff11771177117717711177111111771111117711771177117711117711111111771177177111771111117771771177717711771177117711771
1ff11ff11fffff111771111117711771177777111777771117711111177117711117711111111771177771111771111117777771177777711771177117711771
1ff11ff11ff11ff11771111117711771177111111771111117717771177777711117711111111771177771111771111117717171177777711771177117777711
1ffffff11ff11ff11771177117717711177777711771111117711771177117711117711117711771177177111771111117711171177177711771177117711111
1ff11ff11fffff111177771117777111177777711771111111777771177117711777777111777711177117711777777117711171177117711777777117711111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11777711177777111177777117777771177117711771177117711171177117711771177117777771117777111117711111777711117777111111771117777771
17711771177117711777111111177111177117711771177117711171177117711771177111117711177117711177711117711771171117711117771117711111
17711771177117711177771111177111177117711771177117711171111771111177771111177111177177711117711111117711111777111177771117777711
17717771177777111111177111177111177117711777777117717171111771111117711111771111177717711117711111177111111117711770771111111771
17777711177177711111177111177111177117711177771117777771177117711117711117711111177117711117711111771111177117711777777117711771
11771771177117711777771111177111117777111117711117771771177117711117711117777771117777111177771117777771117777111111771111777711
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11777711177777711177771111777711111111111111111111717111111771111171171111111111111111111111111111111111117777111117711111177111
17711111111117711771177117711771111111111111111111717111111771111777777111111111111111111111111111171111177117711117711111177111
17777711111177111177771111777771111111111111111111111111111771111170071111111111111111111177771111171111111177111111111111111111
17711771111771111771177111111771111111111111111111111111111771111170071117777771111111111111111117777711111771111111111111111111
17711771111771111771177111117711111771111117711111111111111111111777777111111111111111111177771111171111111111111117711111177111
11777711111771111177771111777111111771111117711111111111111771111171171111111111177777711111111111171111111771111117711111177111
11111111111111111111111111111111111111111177111111111111111111111111111111111111111111111111111111111111111111111111111111771111
11111111111111111177111111117711117777111117777111117711117711111a1a1a1a11111111111111111111111111111111111111111111111111111111
1111117117111111177111111111177111771111111117711117711111177111a077770117777771111771111111111111111111111111111111111111111111
11111711117111111771111111111771117711111111177111771111111177111770077a17777771117777111111111111111111111111111111111111111111
1111711111171111177111111111177111771111111117711771111111111771a000770117777771177117711111111111111111111111111111111111111111
11171111111171111771111111111771177111111111771117711111111117711007700a17777771177117711111111111111111111111111111111111111111
1171111111111711177111111111177117711111111177111177111111117711a000000117777771177777711111111111111111111111111111111111111111
17111111111111711771111111111771177111111111771111177111111771111007700a17777771177117711111111111111111111111111111111111111111
1111111111111111117711111111771117777111117777111111771111771111a1a1a1a111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
__map__
0d0e3b0b0e150400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
